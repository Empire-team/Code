//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/28/2020 12:46:51 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ErpContext
{

    [DatabaseAttribute(Name = "erp")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class ErpDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ErpDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAccountDetail(AccountDetail instance);
        partial void UpdateAccountDetail(AccountDetail instance);
        partial void DeleteAccountDetail(AccountDetail instance);
        partial void InsertFunctionkeymaster(Functionkeymaster instance);
        partial void UpdateFunctionkeymaster(Functionkeymaster instance);
        partial void DeleteFunctionkeymaster(Functionkeymaster instance);
        partial void InsertCountry(Country instance);
        partial void UpdateCountry(Country instance);
        partial void DeleteCountry(Country instance);

        #endregion

        public ErpDataContext() :
        base(GetConnectionString("ErpDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public ErpDataContext(MappingSource mappingSource) :
        base(GetConnectionString("ErpDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public ErpDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ErpDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<AccountDetail> AccountDetails
        {
            get
            {
                return this.GetTable<AccountDetail>();
            }
        }

        public Devart.Data.Linq.Table<Functionkeymaster> Functionkeymasters
        {
            get
            {
                return this.GetTable<Functionkeymaster>();
            }
        }

        public Devart.Data.Linq.Table<Country> Countries
        {
            get
            {
                return this.GetTable<Country>();
            }
        }

    
        /// <summary>
        /// There are no comments for SpCountry in the schema.
        /// </summary>
        [Function(Name=@"erp.sp_country")]
        public Devart.Data.Linq.ISingleResult<Country> SpCountry()
        {
            IExecuteResult _SpCountryResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((Devart.Data.Linq.ISingleResult<Country>)(_SpCountryResult.ReturnValue));
        }

    
        /// <summary>
        /// There are no comments for GetAccountDetail in the schema.
        /// </summary>
        [Function(Name=@"erp.GetAccountDetails")]
        public Devart.Data.Linq.ISingleResult<GetAccountDetailResult> GetAccountDetail()
        {
            IExecuteResult _GetAccountDetailResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((Devart.Data.Linq.ISingleResult<GetAccountDetailResult>)(_GetAccountDetailResult.ReturnValue));
        }

    
        /// <summary>
        /// There are no comments for SpAccountdetail in the schema.
        /// </summary>
        [Function(Name=@"erp.sp_accountdetails")]
        public void SpAccountdetail([Parameter(Name="p_fndisplayname", DbType="VARCHAR(50)")] string p_fndisplayname, [Parameter(Name="p_cusname", DbType="VARCHAR(50)")] string p_cusname, [Parameter(Name="p_gender", DbType="CHAR(20)")] string p_gender, [Parameter(Name="p_address", DbType="VARCHAR(225)")] string p_address, [Parameter(Name="p_city", DbType="VARCHAR(50)")] string p_city, [Parameter(Name="p_state", DbType="VARCHAR(50)")] string p_state, [Parameter(Name="p_zipcode", DbType="CHAR(10)")] string p_zipcode, [Parameter(Name="p_country", DbType="VARCHAR(50)")] string p_country, [Parameter(Name="p_phno", DbType="VARCHAR(50)")] string p_phno, [Parameter(Name="p_email", DbType="VARCHAR(50)")] string p_email, [Parameter(Name="p_gstno", DbType="VARCHAR(50)")] string p_gstno)
        {
            IExecuteResult _SpAccountdetailResult = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), p_fndisplayname, p_cusname, p_gender, p_address, p_city, p_state, p_zipcode, p_country, p_phno, p_email, p_gstno);
        }
    }
}

namespace ErpContext
{

    /// <summary>
    /// There are no comments for ErpContext.AccountDetail in the schema.
    /// </summary>
    [Table(Name = @"erp.account_details")]
    public partial class AccountDetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CUSFnCode;

        private long _Id;

        private string _CusName = @"0";

        private string _Gender = @"0";

        private string _Address = @"0";

        private string _City = @"0";

        private string _State = @"0";

        private string _ZipCode = @"0";

        private string _Country = @"0";

        private string _PhNo = @"0";

        private string _Email = @"0";

        private string _GSTNo = @"0";
        #pragma warning restore 0649

        private EntityRef<Functionkeymaster> _Functionkeymaster;

        private EntityRef<Country> _Country1;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCUSFnCodeChanging(string value);
        partial void OnCUSFnCodeChanged();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnCusNameChanging(string value);
        partial void OnCusNameChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhNoChanging(string value);
        partial void OnPhNoChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnGSTNoChanging(string value);
        partial void OnGSTNoChanged();
        #endregion

        public AccountDetail()
        {
            this._Functionkeymaster  = default(EntityRef<Functionkeymaster>);
            this._Country1  = default(EntityRef<Country>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CUSFnCode in the schema.
        /// </summary>
        [Column(Name = @"CUS_FnCode", Storage = "_CUSFnCode", CanBeNull = false, DbType = "CHAR(10) NOT NULL", IsPrimaryKey = true)]
        public string CUSFnCode
        {
            get
            {
                return this._CUSFnCode;
            }
            set
            {
                if (this._CUSFnCode != value)
                {
                    if (this._Functionkeymaster.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCUSFnCodeChanging(value);
                    this.SendPropertyChanging("CUSFnCode");
                    this._CUSFnCode = value;
                    this.SendPropertyChanged("CUSFnCode");
                    this.OnCUSFnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(4) UNSIGNED NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CusName in the schema.
        /// </summary>
        [Column(Storage = "_CusName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CusName
        {
            get
            {
                return this._CusName;
            }
            set
            {
                if (this._CusName != value)
                {
                    this.OnCusNameChanging(value);
                    this.SendPropertyChanging("CusName");
                    this._CusName = value;
                    this.SendPropertyChanged("CusName");
                    this.OnCusNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Storage = "_Gender", CanBeNull = false, DbType = "CHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging("Gender");
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", CanBeNull = false, DbType = "VARCHAR(225) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [Column(Storage = "_State", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging("State");
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZipCode in the schema.
        /// </summary>
        [Column(Storage = "_ZipCode", CanBeNull = false, DbType = "CHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ZipCode
        {
            get
            {
                return this._ZipCode;
            }
            set
            {
                if (this._ZipCode != value)
                {
                    this.OnZipCodeChanging(value);
                    this.SendPropertyChanging("ZipCode");
                    this._ZipCode = value;
                    this.SendPropertyChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [Column(Storage = "_Country", CanBeNull = false, DbType = "CHAR(20) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    if (this._Country1.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCountryChanging(value);
                    this.SendPropertyChanging("Country");
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhNo in the schema.
        /// </summary>
        [Column(Storage = "_PhNo", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhNo
        {
            get
            {
                return this._PhNo;
            }
            set
            {
                if (this._PhNo != value)
                {
                    this.OnPhNoChanging(value);
                    this.SendPropertyChanging("PhNo");
                    this._PhNo = value;
                    this.SendPropertyChanged("PhNo");
                    this.OnPhNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GSTNo in the schema.
        /// </summary>
        [Column(Storage = "_GSTNo", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GSTNo
        {
            get
            {
                return this._GSTNo;
            }
            set
            {
                if (this._GSTNo != value)
                {
                    this.OnGSTNoChanging(value);
                    this.SendPropertyChanging("GSTNo");
                    this._GSTNo = value;
                    this.SendPropertyChanged("GSTNo");
                    this.OnGSTNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Functionkeymaster in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionkeymaster_AccountDetail", Storage="_Functionkeymaster", ThisKey="CUSFnCode", OtherKey="Code", IsForeignKey=true)]
        public Functionkeymaster Functionkeymaster
        {
            get
            {
                return this._Functionkeymaster.Entity;
            }
            set
            {
                Functionkeymaster previousValue = this._Functionkeymaster.Entity;
                if ((previousValue != value) || (this._Functionkeymaster.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Functionkeymaster");
                    if (previousValue != null)
                    {
                        this._Functionkeymaster.Entity = null;
                        previousValue.AccountDetails.Remove(this);
                    }
                    this._Functionkeymaster.Entity = value;
                    if (value != null)
                    {
                        this._CUSFnCode = value.Code;
                        value.AccountDetails.Add(this);
                    }
                    else
                    {
                        this._CUSFnCode = default(string);
                    }
                    this.SendPropertyChanged("Functionkeymaster");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Country1 in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_AccountDetail", Storage="_Country1", ThisKey="Country", OtherKey="CountryCode", IsForeignKey=true)]
        public Country Country1
        {
            get
            {
                return this._Country1.Entity;
            }
            set
            {
                Country previousValue = this._Country1.Entity;
                if ((previousValue != value) || (this._Country1.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Country1");
                    if (previousValue != null)
                    {
                        this._Country1.Entity = null;
                        previousValue.AccountDetails.Remove(this);
                    }
                    this._Country1.Entity = value;
                    if (value != null)
                    {
                        this._Country = value.CountryCode;
                        value.AccountDetails.Add(this);
                    }
                    else
                    {
                        this._Country = default(string);
                    }
                    this.SendPropertyChanged("Country1");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for ErpContext.Functionkeymaster in the schema.
    /// </summary>
    [Table(Name = @"erp.functionkeymaster")]
    public partial class Functionkeymaster : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _Code = @"0";

        private string _Name = @"0";

        private string _DisplayName = @"0";

        private string _Abbrevation = @"0";

        private string _Narration1 = @"0";

        private string _Narration2 = @"0";
        #pragma warning restore 0649

        private EntitySet<AccountDetail> _AccountDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnAbbrevationChanging(string value);
        partial void OnAbbrevationChanged();
        partial void OnNarration1Changing(string value);
        partial void OnNarration1Changed();
        partial void OnNarration2Changing(string value);
        partial void OnNarration2Changed();
        #endregion

        public Functionkeymaster()
        {
            this._AccountDetails = new EntitySet<AccountDetail>(new Action<AccountDetail>(this.attach_AccountDetails), new Action<AccountDetail>(this.detach_AccountDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Storage = "_Code", CanBeNull = false, DbType = "CHAR(10) NOT NULL", IsPrimaryKey = true)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DisplayName in the schema.
        /// </summary>
        [Column(Storage = "_DisplayName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if (this._DisplayName != value)
                {
                    this.OnDisplayNameChanging(value);
                    this.SendPropertyChanging("DisplayName");
                    this._DisplayName = value;
                    this.SendPropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Abbrevation in the schema.
        /// </summary>
        [Column(Storage = "_Abbrevation", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Abbrevation
        {
            get
            {
                return this._Abbrevation;
            }
            set
            {
                if (this._Abbrevation != value)
                {
                    this.OnAbbrevationChanging(value);
                    this.SendPropertyChanging("Abbrevation");
                    this._Abbrevation = value;
                    this.SendPropertyChanged("Abbrevation");
                    this.OnAbbrevationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Narration1 in the schema.
        /// </summary>
        [Column(Storage = "_Narration1", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Narration1
        {
            get
            {
                return this._Narration1;
            }
            set
            {
                if (this._Narration1 != value)
                {
                    this.OnNarration1Changing(value);
                    this.SendPropertyChanging("Narration1");
                    this._Narration1 = value;
                    this.SendPropertyChanged("Narration1");
                    this.OnNarration1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Narration2 in the schema.
        /// </summary>
        [Column(Storage = "_Narration2", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Narration2
        {
            get
            {
                return this._Narration2;
            }
            set
            {
                if (this._Narration2 != value)
                {
                    this.OnNarration2Changing(value);
                    this.SendPropertyChanging("Narration2");
                    this._Narration2 = value;
                    this.SendPropertyChanged("Narration2");
                    this.OnNarration2Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Functionkeymaster_AccountDetail", Storage="_AccountDetails", ThisKey="Code", OtherKey="CUSFnCode", DeleteRule="RESTRICT")]
        public EntitySet<AccountDetail> AccountDetails
        {
            get
            {
                return this._AccountDetails;
            }
            set
            {
                this._AccountDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AccountDetails(AccountDetail entity)
        {
            this.SendPropertyChanging("AccountDetails");
            entity.Functionkeymaster = this;
        }
    
        private void detach_AccountDetails(AccountDetail entity)
        {
            this.SendPropertyChanging("AccountDetails");
            entity.Functionkeymaster = null;
        }
    }

    /// <summary>
    /// There are no comments for ErpContext.Country in the schema.
    /// </summary>
    [Table(Name = @"erp.country")]
    public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _CountryCode = @"";

        private string _CountryName = @"";
        #pragma warning restore 0649

        private EntitySet<AccountDetail> _AccountDetails;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnCountryCodeChanging(string value);
        partial void OnCountryCodeChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();
        #endregion

        public Country()
        {
            this._AccountDetails = new EntitySet<AccountDetail>(new Action<AccountDetail>(this.attach_AccountDetails), new Action<AccountDetail>(this.detach_AccountDetails));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryCode in the schema.
        /// </summary>
        [Column(Storage = "_CountryCode", CanBeNull = false, DbType = "CHAR(20) NOT NULL", IsPrimaryKey = true)]
        public string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    this.OnCountryCodeChanging(value);
                    this.SendPropertyChanging("CountryCode");
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryName in the schema.
        /// </summary>
        [Column(Storage = "_CountryName", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryName
        {
            get
            {
                return this._CountryName;
            }
            set
            {
                if (this._CountryName != value)
                {
                    this.OnCountryNameChanging(value);
                    this.SendPropertyChanging("CountryName");
                    this._CountryName = value;
                    this.SendPropertyChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for AccountDetails in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Country_AccountDetail", Storage="_AccountDetails", ThisKey="CountryCode", OtherKey="Country", DeleteRule="RESTRICT")]
        public EntitySet<AccountDetail> AccountDetails
        {
            get
            {
                return this._AccountDetails;
            }
            set
            {
                this._AccountDetails.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_AccountDetails(AccountDetail entity)
        {
            this.SendPropertyChanging("AccountDetails");
            entity.Country1 = this;
        }
    
        private void detach_AccountDetails(AccountDetail entity)
        {
            this.SendPropertyChanging("AccountDetails");
            entity.Country1 = null;
        }
    }

}

namespace ErpContext
{

    /// <summary>
    /// There are no comments for GetAccountDetailResult in the schema.
    /// </summary>
    public partial class GetAccountDetailResult: INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _CusId;

        private string _CusName;

        private string _Gender;

        private string _Address;

        private string _City;

        private string _State;

        private string _ZipCode;

        private string _CountryName;

        private string _PhNo;

        private string _Email;

        private string _GSTNo;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCusIdChanging(string value);
        partial void OnCusIdChanged();
        partial void OnCusNameChanging(string value);
        partial void OnCusNameChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipCodeChanging(string value);
        partial void OnZipCodeChanged();
        partial void OnCountryNameChanging(string value);
        partial void OnCountryNameChanged();
        partial void OnPhNoChanging(string value);
        partial void OnPhNoChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnGSTNoChanging(string value);
        partial void OnGSTNoChanged();
        #endregion

        public GetAccountDetailResult()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for CusId in the schema.
        /// </summary>
        [Column(Storage = "_CusId", DbType = "VARCHAR NULL", UpdateCheck = UpdateCheck.Never)]
        public string CusId
        {
            get
            {
                return this._CusId;
            }
            set
            {
                if (this._CusId != value)
                {
                    this.OnCusIdChanging(value);
                    this.SendPropertyChanging("CusId");
                    this._CusId = value;
                    this.SendPropertyChanged("CusId");
                    this.OnCusIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CusName in the schema.
        /// </summary>
        [Column(Storage = "_CusName", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string CusName
        {
            get
            {
                return this._CusName;
            }
            set
            {
                if (this._CusName != value)
                {
                    this.OnCusNameChanging(value);
                    this.SendPropertyChanging("CusName");
                    this._CusName = value;
                    this.SendPropertyChanged("CusName");
                    this.OnCusNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Gender in the schema.
        /// </summary>
        [Column(Storage = "_Gender", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if (this._Gender != value)
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging("Gender");
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging("Address");
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        [Column(Storage = "_City", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging("City");
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for State in the schema.
        /// </summary>
        [Column(Storage = "_State", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string State
        {
            get
            {
                return this._State;
            }
            set
            {
                if (this._State != value)
                {
                    this.OnStateChanging(value);
                    this.SendPropertyChanging("State");
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ZipCode in the schema.
        /// </summary>
        [Column(Storage = "_ZipCode", CanBeNull = false, DbType = "CHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ZipCode
        {
            get
            {
                return this._ZipCode;
            }
            set
            {
                if (this._ZipCode != value)
                {
                    this.OnZipCodeChanging(value);
                    this.SendPropertyChanging("ZipCode");
                    this._ZipCode = value;
                    this.SendPropertyChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CountryName in the schema.
        /// </summary>
        [Column(Storage = "_CountryName", DbType = "VARCHAR NULL", UpdateCheck = UpdateCheck.Never)]
        public string CountryName
        {
            get
            {
                return this._CountryName;
            }
            set
            {
                if (this._CountryName != value)
                {
                    this.OnCountryNameChanging(value);
                    this.SendPropertyChanging("CountryName");
                    this._CountryName = value;
                    this.SendPropertyChanged("CountryName");
                    this.OnCountryNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PhNo in the schema.
        /// </summary>
        [Column(Storage = "_PhNo", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string PhNo
        {
            get
            {
                return this._PhNo;
            }
            set
            {
                if (this._PhNo != value)
                {
                    this.OnPhNoChanging(value);
                    this.SendPropertyChanging("PhNo");
                    this._PhNo = value;
                    this.SendPropertyChanged("PhNo");
                    this.OnPhNoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GSTNo in the schema.
        /// </summary>
        [Column(Storage = "_GSTNo", CanBeNull = false, DbType = "VARCHAR NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string GSTNo
        {
            get
            {
                return this._GSTNo;
            }
            set
            {
                if (this._GSTNo != value)
                {
                    this.OnGSTNoChanging(value);
                    this.SendPropertyChanging("GSTNo");
                    this._GSTNo = value;
                    this.SendPropertyChanged("GSTNo");
                    this.OnGSTNoChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
